#include "servo_driver.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "esp_log.h"

static const char *TAG = "SERVO_CONTROL";

QueueHandle_t xQueuePosition;
QueueHandle_t xQueueEvent;
bool gEvent = false;

static void task_servo_handler(void *arg)
{
    int position;
    while (true)
    {
        if (gEvent)
        {
            if (xQueueReceive(xQueuePosition, &position, portMAX_DELAY))
            {
                // Convert position to angle
                int angle = (position / 100.0) * 180 - 90; // Example conversion
                ESP_LOGI(TAG, "Setting servo angle to %d based on position %d", angle, position);
                set_servo_angle(0, angle);
            }
        }
    }
}

static void task_event_handler(void *arg)
{
    while (true)
    {
        xQueueReceive(xQueueEvent, &gEvent, portMAX_DELAY);
    }
}

extern "C" void app_main()
{
    // Initialize the servo driver
    servo_driver_init();
    ESP_LOGI("APP_MAIN", "Servo driver initialized successfully");

    // Create queues
    xQueuePosition = xQueueCreate(10, sizeof(int));
    xQueueEvent = xQueueCreate(10, sizeof(bool));

    // Create tasks
    xTaskCreatePinnedToCore(task_servo_handler, "servo_handler", 2048, NULL, 5, NULL, 0);
    if (xQueueEvent)
    {
        xTaskCreatePinnedToCore(task_event_handler, "event_handler", 2048, NULL, 5, NULL, 1);
    }

    // Example: Sending events and positions to the queues
    int position = 0;
    int step = 10;

    while (true)
    {
        gEvent = true;
        xQueueSend(xQueueEvent, &gEvent, portMAX_DELAY);
        xQueueSend(xQueuePosition, &position, portMAX_DELAY);

        vTaskDelay(pdMS_TO_TICKS(500)); // Wait 500 milliseconds

        position += step;
        if (position > 100 || position < 0)
        {
            step = -step;
        }
    }
}
